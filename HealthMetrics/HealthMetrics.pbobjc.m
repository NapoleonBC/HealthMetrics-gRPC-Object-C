// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HealthMetrics.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "HealthMetrics.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - HealthMetricsRoot

@implementation HealthMetricsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - HealthMetricsRoot_FileDescriptor

static GPBFileDescriptor *HealthMetricsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"health_metrics"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - HealthMetric

@implementation HealthMetric

@dynamic metricName;
@dynamic value;
@dynamic timestamp;

typedef struct HealthMetric__storage_ {
  uint32_t _has_storage_[1];
  float value;
  NSString *metricName;
  int64_t timestamp;
} HealthMetric__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "metricName",
        .dataTypeSpecific.clazz = Nil,
        .number = HealthMetric_FieldNumber_MetricName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HealthMetric__storage_, metricName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = HealthMetric_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HealthMetric__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "timestamp",
        .dataTypeSpecific.clazz = Nil,
        .number = HealthMetric_FieldNumber_Timestamp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HealthMetric__storage_, timestamp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HealthMetric class]
                                     rootClass:[HealthMetricsRoot class]
                                          file:HealthMetricsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HealthMetric__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MetricConfiguration

@implementation MetricConfiguration

@dynamic metricNamesArray, metricNamesArray_Count;
@dynamic samplingRate;

typedef struct MetricConfiguration__storage_ {
  uint32_t _has_storage_[1];
  int32_t samplingRate;
  NSMutableArray *metricNamesArray;
} MetricConfiguration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "metricNamesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MetricConfiguration_FieldNumber_MetricNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MetricConfiguration__storage_, metricNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "samplingRate",
        .dataTypeSpecific.clazz = Nil,
        .number = MetricConfiguration_FieldNumber_SamplingRate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MetricConfiguration__storage_, samplingRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MetricConfiguration class]
                                     rootClass:[HealthMetricsRoot class]
                                          file:HealthMetricsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MetricConfiguration__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
